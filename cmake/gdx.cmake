macro(gdx_add_ios_framework target_name framework additional_paths)
    LIST(APPEND CMAKE_FRAMEWORK_PATH ${additional_paths})
    find_library(FOUND_FRAMEWORK_${framework} NAMES ${framework})

    message("Library: " ${FOUND_FRAMEWORK_${framework}})
    target_link_libraries(${target_name} ${FOUND_FRAMEWORK_${framework}})
endmacro()

macro(gdx_ios_copy_resources target_name target_files destination)
    add_custom_command(
        TARGET ${target_name}
        POST_BUILD
        COMMAND rsync -r --exclude .DS_Store --exclude CVS --exclude .svn --exclude .git --exclude *~ ${target_files} "\${BUILT_PRODUCTS_DIR}/\${CONTENTS_FOLDER_PATH}/${destination}")
endmacro()

macro(gdx_make_resources target_name target_files destination)
    if (APPLE) 
        gdx_ios_copy_resources(${target_name} ${target_files} ${destination})
    elseif(ANDROID_NDK)
        if (NOT GDX_JAVA_APPLICATION_DIR)
            message(FATAL_ERROR "Please specify the folder where the eclipse project it's located on the variable GDX_JAVA_APPLICATION_DIR")
        endif()        
        if (NOT EXISTS ${GDX_JAVA_APPLICATION_DIR}/assets/${destination}) 
            execute_process(COMMAND ln -s ${target_files} ${GDX_JAVA_APPLICATION_DIR}/assets/${destination})     
        endif()
    else()
        if (NOT EXISTS ${PROJECT_BINARY_DIR}/${destination}) 
            execute_process(COMMAND ln -s ${target_files} ${PROJECT_BINARY_DIR}/${destination})     
        endif()
    endif()
endmacro()

macro(gdx_setup_target target_name target_type sources)
    string(TOUPPER ${target_type} target_type)
    
    if(CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo" OR GDX_LOG_LEVEL STREQUAL "INFO")
        add_definitions(-DGDX_LOG_LEVEL_INFO)
        add_definitions(-DGDX_LOG_LEVEL_ERROR)
    elseif(CMAKE_BUILD_TYPE STREQUAL "Release" OR GDX_LOG_LEVEL STREQUAL "RELEASE")
        add_definitions(-DGDX_LOG_LEVEL_ERROR)
    else()
        add_definitions(-DGDX_LOG_LEVEL_DEBUG)
        add_definitions(-DGDX_LOG_LEVEL_INFO)
        add_definitions(-DGDX_LOG_LEVEL_ERROR)
    endif()

    if (APPLE)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -x objective-c++ -mno-thumb")      
        set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++11")
        set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
        
        if (${target_type} STREQUAL "EXECUTABLE")
            add_executable(${target_name} MACOSX_BUNDLE ${sources})
            set(IOS_FRAMEWORKS "Foundation;AudioToolbox;CoreGraphics;QuartzCore;UIKit;OpenGLES;AVFoundation;OpenAL")
        
            foreach(FRAMEWORK ${IOS_FRAMEWORKS})
                gdx_add_ios_framework(${target_name} ${FRAMEWORK} "")
            endforeach()

            set_target_properties(${target_name} PROPERTIES XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY "iPhone Developer")
        else()
            add_library(${target_name} STATIC ${sources})
        endif()
    elseif (ANDROID_NDK)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++0x")
        
        if (${target_type} STREQUAL "EXECUTABLE")
            add_library(${target_name} SHARED ${sources})
        else() 
            add_library(${target_name} ${library_type} ${sources})
        endif()
    elseif(UNIX)        
        
        if (${target_type} STREQUAL "EXECUTABLE")
            add_executable(${target_name} ${sources})
        else()
            add_library(${target_name} ${target_type} ${sources})
        endif()
    endif()
endmacro()

macro(initialize_gdx)

SET(GDX_BACKEND_IOS 0)
SET(GDX_BACKEND_ANDROID 0)
SET(GDX_BACKEND_LINUX 0)
SET(GDX_BACKEND_WIN32 0)

if(APPLE)
    message("MacOSX (iOS) found. Setting the backend to IOS")
    SET(GDX_BACKEND_IOS TRUE CACHE BOOL "")
    SET(GDX_BACKEND_LIB "gdx-cpp-backend-ios")
    add_definitions(-DGDX_BACKEND_IOS -DGDX_BACKEND_SUFFIX="ios")
    set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++11")
    set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
    set(BOX2D_BUILD_STATIC TRUE)
    set(BOX2D_BUILD_SHARED FALSE)    
elseif (UNIX)
     if (ANDROID_NDK)
        message("ANDROID_NDK Found. Setting the backend to ANDROID")
        SET(GDX_BACKEND_ANDROID TRUE CACHE BOOL "")
        SET(GDX_BACKEND_LIB "gdx-cpp-backend-android" CACHE STRING "")
        add_definitions(-DGDX_BACKEND_ANDROID -DGDX_BACKEND_SUFFIX="android")
        set(BOX2D_BUILD_STATIC FALSE)
        set(BOX2D_BUILD_SHARED TRUE)
     else()
        message("Linux found. Setting the backend to LINUX")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
        SET(GDX_BACKEND_LINUX TRUE CACHE BOOL "")
        SET(GDX_BACKEND_LIB "gdx-cpp-backend-linux" CACHE STRING "")
        add_definitions(-DGDX_BACKEND_LINUX -DGDX_BACKEND_SUFFIX="linux" -DLIBGDX_CPP_BUILD_OPENGL_INSTEAD_GLES) 
              if (BUILD_AS_SHARED_LIBRARIES)
            set(BOX2D_BUILD_STATIC FALSE)
            set(BOX2D_BUILD_SHARED TRUE)
        else()
            set(BOX2D_BUILD_STATIC TRUE)
            set(BOX2D_BUILD_SHARED FALSE)
        endif()
     endif()
elseif(WIN32)
    message("Win32 found. Setting the backend to WIN32")
    SET(GDX_BACKEND_WIN32 TRUE CACHE BOOL "")
    SET(GDX_BACKEND_LIB "gdx-cpp-backend-win32" CACHE STRING "")
    add_definitions(-DGDX_BACKEND_WIN32 -DGDX_BACKEND_SUFFIX="win32")
endif()

endmacro()